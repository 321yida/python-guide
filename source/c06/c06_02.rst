6.2 如何捕获异常
================

1. 如何抛出异常？
-----------------

异常的产生有两种来源：

-  一种是程序自动抛出
-  一种是开发者主动抛出

在 Python 中是使用 ``raise``
关键字来抛出异常的，比如在下面这个函数中，如果不存在目标文件，则会抛出一个
Exception 通用异常。

.. code:: python

   def demo_func(filename):
       if not os.path.isfile(filename):
           raise Exception

.. _如何捕获异常-1:

2. 如何捕获异常？
-----------------

出现错误或者异常没有关系，关键在于你要学会预判程序可能会出现的错误或异常，然后在代码中捕获这些异常并处理。

异常的捕获主要有三种方式：

-  第一种：使用 ``try ... except ...``

如果代码A发生了异常，则会走到代码B的逻辑

.. code:: python

   try:
       代码A
   except:
       代码B

举个例子

.. code:: python

   >>> try:
   ...     1/0
   ... except ZeroDivisionError as e:
   ...     print("发生了异常：错误信息如下: \n" + str(e))
   ... 
   发生了异常：错误信息如下: 
   integer division or modulo by zero

-  第二种：使用 ``try ... except ... else``

如果代码A发生了异常，则会走到代码B的逻辑，如果没有发生异常，则会走到代码C

.. code:: python

   try:
       代码A
   except:
       代码B
   else:
       代码C

举个例子

不发生异常的情况

.. code:: python

   >>> try:
   ...     4/2
   ... except ZeroDivisionError as e:
   ...     print("发生了异常：错误信息如下: \n" + str(e))
   ... else:
   ...     print("程序正常运行")
   ... 
   2
   程序正常运行

发生异常的情况

.. code:: python

   >>> try:
   ...     1/0
   ... except ZeroDivisionError as e:
   ...     print("发生了异常：错误信息如下: \n" + str(e))
   ... else:
   ...     print("程序正常运行")
   ... 
   发生了异常：错误信息如下: 
   integer division or modulo by zero

-  第三种：使用 ``try ... except ... finally``

如果代码A发生了异常，则会走到代码B的逻辑，最后不管有没有发生异常都会走到代码C

.. code:: python

   try:
       代码A
   except:
       代码B
   finally:
       代码C

举个例子

发生异常的情况

.. code:: python

   >>> try:
   ...     1/0
   ... except ZeroDivisionError as e:
   ...     print("发生了异常：错误信息如下: \n" + str(e))
   ... finally:
   ...     print("程序运行结束!!")
   ... 
   发生了异常：错误信息如下: 
   integer division or modulo by zero
   程序运行结束!!

不发生异常的情况

.. code:: python

   >>> try:
   ...     4/2
   ... except ZeroDivisionError as e:
   ...     print("发生了异常：错误信息如下: \n" + str(e))
   ... finally:
   ...     print("程序运行结束!!")
   ... 
   2
   程序运行结束!!
